#!/usr/bin/env python
#
# Copyright (C) STMicroelectronics Ltd. 2012
#
# This file is part of ATOS.
#
# ATOS is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License v2.0
# as published by the Free Software Foundation
#
# ATOS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# v2.0 along with ATOS. If not, see <http://www.gnu.org/licenses/>.
#
#
# Usage: get usage with atos-audit -h
#

import sys, os
sys.path.append(os.path.abspath(os.path.join(
            os.path.dirname(__file__), '..', 'lib', 'atos', 'python')))
from atos import globals

import stat
import os
import argparse
from atos import atos_lib

parser = argparse.ArgumentParser(description='atos-audit: auditing tool for a '
                                 'build system that generates a build template to be used by atos-build',
                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument("commands",
                    nargs=argparse.REMAINDER,
                    help="commands to audit")
audit_group = parser.add_argument_group('Audit Options')
audit_group.add_argument("-r",
                         dest="ccregexp",
                         metavar="<ccdriver_re>",
                         help="specify the compiler driver as a regexp for the basename",
                         default="-\?\(clang\|gcc\|g++\|cc\|armlink\|c++\|ar\)$")
audit_group.add_argument("-c",
                         metavar="<ccdriver>",
                         help="alternatively specify the exact compiler driver basename")
audit_group.add_argument("-f", "--force",
                         help="force rebuild by running build script instead of audited build",
                         action="store_true")
output_group = parser.add_argument_group('Output File Options')
output_group.add_argument("-o", dest="outfile",
                          metavar="<outfile>",
                          help="output audit file into <outfile>",
                          default="build.audit")
conf_group = parser.add_argument_group('Configuration Options')
conf_group.add_argument("-C", dest="configuration_path",
                        metavar="<path>",
                        help="configuration path",
                        default="./atos-configurations")
misc_group = parser.add_argument_group('Misc Options')
misc_group.add_argument("-q", "--quiet",
                        help="quiet output",
                        action="store_true")
misc_group.add_argument("-n", "--dryrun",
                        help="dry run, output commands only",
                        action="store_true")
misc_group.add_argument("-v","--version",
                        help="output version string",
                        action="version",
                        version='%(prog)s @VERSION@')
args = parser.parse_args()

if args.c:
    args.ccregexp = '^' + args.c + '$'

# ####################################################################

def proot_atos():
    status, uname = atos_lib.subcall('uname -m')
    arch = 'i386' if uname in ['i386', 'i486', 'i586', 'i686'] else uname
    proot_exec = os.path.join(globals.LIBDIR, arch, 'proot')
    if os.path.isfile(proot_exec):
        return os.path.join(globals.LIBDIR, arch, "proot")
    else:
        return "proot"

PROOT = proot_atos()

# ####################################################################
if args.quiet != 1:
    print "Auditing build..."

if args.outfile == "build.audit":
    args.outfile = os.path.join(args.configuration_path, args.outfile)
    if not args.dryrun:
        if not os.path.isdir(args.configuration_path):
            os.mkdir(args.configuration_path)
        atos_lib.subcall("touch " + args.outfile)
        build_sh = os.path.join(args.configuration_path, "build.sh")
        f = open(build_sh, 'w')
        f.write("#!/bin/sh\n")
        f.write("cd ")
        f.write(os.getcwd())
        f.write(" && $ARUN ")
        f.write(" ".join(args.commands))
        f.write("\n")
        f.close()
        os.chmod(build_sh,stat.S_IRWXU|stat.S_IRGRP|stat.S_IXGRP|stat.S_IROTH|stat.S_IXOTH)
        force_sh = os.path.join(args.configuration_path, "build.force")
        f = open(force_sh, 'w')
        f.write(str(int(args.force)))
        f.close()
    else:
        print "mkdir -p " + args.configuration_path
        print "touch " + args.outfile
        print "fill " + args.configuration_path + "/build.sh"
        print "fill " + args.configuration_path + "/build.force"


command = ("env PROOT_IGNORE_ELF_INTERPRETER=1 PROOT_ADDON_CC_DEPS=1 PROOT_ADDON_CC_DEPS_OUTPUT=\"" +
           args.outfile + "\" PROOT_ADDON_CC_DEPS_CCRE=\"" + args.ccregexp + "\" " +
           PROOT +" -w " + os.getcwd() + " / ")
command += " ".join(args.commands)
atos_lib.system(command, True, False)
