#!/usr/bin/env bash
#
# Copyright (C) STMicroelectronics Ltd. 2012
#
# This file is part of ATOS.
#
# ATOS is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License v2.0
# as published by the Free Software Foundation
#
# ATOS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# v2.0 along with ATOS. If not, see <http://www.gnu.org/licenses/>.
#
#
# Usage: get usage with atos-config -h
#

set -e
[ "$DEBUG" = "" ] || set -x
dir=`cd \`dirname $0\`; pwd`
libdir=`cd $dir/../lib/atos; pwd`
pythondir="$libdir/python"

configuration_path="./atos-configurations"
ppflags=""

#######################

version() {
    echo "atos-config version @VERSION@"
}

usage() {
    cat <<EOF

Usage: atos-config [options]

Configuration Options:
      -C <path> : configuration path [default: $configuration_path]

Misc Options
      -h : output usage
      -v : output version

EOF
}

cleanup() {
    [ ! -d "$tmpdir" ] || rm -rf "$tmpdir"
}
trap "cleanup; exit 3" TERM STOP
trap "cleanup" EXIT
tmpdir=`mktemp -d /tmp/atos-config.XXXXXX`

while getopts C:D:q:cvh opt; do
    case $opt in
	C) configuration_path="$OPTARG"
	    ;;
	D) ppflags="$ppflags -D$OPTARG"
	    ;;
	v) version; exit 0
	    ;;
	h) usage; exit 0
	    ;;
	?) usage; exit 2
	    ;;
    esac
done

shift $((OPTIND - 1))

if [ "$configuration_path" = "" -o ! -d "$configuration_path" ]; then
    echo "`basename $0`: error: missing or inexistent configuration path" >&2
    exit 1
fi


#######################

get_executable_host()
{
    local compiler=${1?}
    local host
    host=`file $compiler | cut -d',' -f2 | sed 's/ //g'`
    case "$host" in
	Intel80[3456]86) host=i386
	    ;;
	x86-64) host=x86_64
	    ;;
	*) host=unknown
	    ;;
    esac
    echo "$host"
}

get_triplet_alias()
{
    local triplet=${1?}
    local alias
    alias=`echo $triplet | sed 's/-.*//'`
    case "$alias" in
	i[3456]86) alias=i386
	    ;;
	sh) alias=sh4
	    ;;
    esac
    echo "$alias"
}
compiler_test()
{
    compiler=$1

    cat > $tmpdir/test.c <<EOF
#include <stdio.h>
int main(void) {
  int i; for (i = 0; i < 10; i++) printf("hello\n");
  return 0;
}
EOF

    compiler_base=`basename $compiler`
    if [[ $compiler_base == armcc || $compiler_base ==  armlink ]]; then

        # compiler id
	name="rvct"
	target="ARM"
	target_alias=arm
	host_alias=`get_executable_host $compiler`

	if [[ `basename $compiler` ==  armcc ]]; then
	    version=`$compiler | head -1 | cut -d' ' -f4`
	else
	    version=`$compiler | head -1 | cut -d' ' -f3`
	fi
	echo "id $name-$target-$version"

        # compiler name
	echo "name $name"

        # version number (major.minor.patchlevel)
	echo "version $version"

        # target machine
	echo "target $target"

	# target alias
	echo "target_alias $target_alias"

	# host alias
	echo "host_alias $host_alias"

        # driver version string
	result=`$compiler | head -1`
	echo "driver_version $result"

        # unsupported features
	echo "lto_enabled 0"
	echo "graphite_enabled 0"
	echo "libgomp_enabled 0"
	echo "plugin_acf none"
	echo "plugins_enabled 0"

    else
        # should work at least for gcc & clang/llvm

        # compiler id
	name=`$compiler -v 2>&1 | grep " version " | cut -d' ' -f1`
	target=`$compiler -dumpmachine`
	target_alias=`get_triplet_alias $target`
	host_alias=`get_executable_host $compiler`
	version=`$compiler -v 2>&1 | grep " version " | cut -d' ' -f3`
	echo "id $name-$target-$version"

        # compiler name
	echo "name $name"

        # version number (major.minor.patchlevel)
	echo "version $version"

        # target machine
	echo "target $target"

	# target alias
	echo "target_alias $target_alias"

	# host alias
	echo "host_alias $host_alias"

        # driver version string
	result=`echo \`$compiler -v 2>&1\``
	echo "driver_version $result"

        # lto
	result=`$compiler -O2 -flto -o $tmpdir/test.out $tmpdir/test.c 2>/dev/null && echo 1 || echo 0`
	echo "lto_enabled $result"

        # graphite
	result=`$compiler -O2 -floop-block -o $tmpdir/test.out $tmpdir/test.c 2>/dev/null && echo 1 || echo 0`
	echo "graphite_enabled $result"

        # libgomp & libpthread
	result=`$compiler -O2 -ftree-parallelize-loops=16 -lc -lgomp -lpthread -o $tmpdir/test.out $tmpdir/test.c 2>/dev/null && echo 1 || echo 0`
	echo "libgomp_enabled $result"

        # acf plugin
	acf_plugin="acf_plugin.so"
	acfpath=${libdir}/plugins/gcc-${version}/${target_alias}/${host_alias}/${acf_plugin}
	if [ ! -f "$acfpath" ]; then
            # use only major/minor version numbers
	    vers=`echo $version | sed 's/\([0-9]*\.[0-9]*\).*/\1/'`
	    acfpath=`\ls -d1 ${libdir}/plugins/gcc-${vers}*/${target_alias}/${host_alias}/${acf_plugin} | sort -r | head -1`
	fi 2>/dev/null
	[ -f "$acfpath" ] || acfpath="none"
	echo "plugin_acf $acfpath"

        # plugins
	if [ -f "$acfpath" ]; then
	    result=`$compiler -O2 -fplugin=$acfpath -fplugin-arg-acf_plugin-test -o $tmpdir/test.out $tmpdir/test.c 2>/dev/null && echo 1 || echo 0`
	    echo "plugins_enabled $result"
	else
	    echo "plugins_enabled 0"
	fi

        # host_wide_int size for plugins
	HWI=0
	# Locate cc1 from gcc path
	cc1_path=`$compiler --print-prog-name=cc1`
	if [ -f "$cc1_path" ]; then
	    # Record HOST_WIDE_INT of cc1 compiler that loads the plugin
	    HWI=`objdump -t $cc1_path | grep target_newline | awk '{print $5 - 0}'`
	    [ "$HWI" != "" ] || HWI=1
	fi
	if [ "$HWI" != "1" ]; then
	    # Check if actual hwi size matches expectations
	    if [ "$host_alias" == "i386" -a "$target_alias" != "x86_64" ]; then
		expected_hwi=4
	    else
		expected_hwi=8
	    fi
	    if [ "$expected_hwi" != "$HWI" ]; then
		HWI=0
	    else
		HWI=1
	    fi
	fi

	echo "valid_host_wide_int $HWI"

    fi
}

json_config_flags_file()
{
    $dir/atos lib config -C $configuration_path --cpl-flags
}

json_config_add_compiler()
{
    $dir/atos lib config -C $configuration_path --add-cpl $1
}

prepare_flag_files()
{
    preprocessor=`cat $configuration_path/compilers | egrep -i "cc|\+\+"|head -1`
    [ -f "$preprocessor" ] || return

    flagsdefs=`json_config_flags_file`
    for flags in $libdir/config/flags.*.cfg; do
	dest=$configuration_path/`basename $flags`
	tmpflags=$tmpdir/`basename $flags`.c
	cp $flags $tmpflags
	$preprocessor -C -P -E $flagsdefs $ppflags $tmpflags > $dest
    done
}

/bin/rm -f $configuration_path/config.json
if [ -f "$configuration_path/compilers" ]; then
    for compiler in `cat $configuration_path/compilers`; do
	    compiler_test $compiler > $tmpdir/config.txt
	    json_config_add_compiler $tmpdir/config.txt
    done
    prepare_flag_files
fi
