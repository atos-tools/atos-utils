#!/usr/bin/env bash
#
# Copyright (C) STMicroelectronics Ltd. 2012
#
# This file is part of ATOS.
#
# ATOS is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License v2.0
# as published by the Free Software Foundation
#
# ATOS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# v2.0 along with ATOS. If not, see <http://www.gnu.org/licenses/>.
#
#
# Usage: get usage with atos-explore-acf -h
#

set -e
[ "$DEBUG" = "" ] || set -x

dir=`cd \`dirname $0\`; pwd`
libdir=`cd $dir/../lib/atos; pwd`
pythondir="$libdir/python"

configuration_path="./atos-configurations"
opt_debug=""
opt_profdir=""
opt_nbruns=""
flags_file=""
executables=""
profiling_script=""
acf_plugin="acf_plugin.so"
acf_plugin_path=""
acf_hot_th=70
acf_cold_th=""
acf_cold_opts="-Os noinline cold"

#######################

version() {
    echo "atos-explore-acf version @VERSION@"
}

usage() {
    cat <<EOF

Usage: atos-explore-acf [options] [variant]

Configuration Options:
      -C <path> : configuration path [default: $configuration_path]
      -n <nb> : number of executions of <run_script> [default: 1]
      -b <path> : remote path to profile files [default: none]
      -e <executables> : executables to be instrumented [default: none]
      -p <profiling_script> : script to get profile information [default: none]

Exploration Options:
      -F <flags_filename> : flags list filename [default: $flags_file]
      -x <hot_th> : Hot functions treshold percentage [default: $acf_hot_th]
      -y <cold_th> : Cold functions treshold percentage [default: `expr 100 - $acf_hot_th`]
      -Y "<cold_opts>" : Cold functions options [default: "$acf_cold_opts"]

Misc Options
      -q : quiet output
      -d : debug mode
      -h : output usage
      -v : output version

EOF
}

cleanup() {
    :
}
trap "cleanup; exit 3" TERM STOP
trap "cleanup" EXIT

while getopts C:e:p:x:y:Y:n:b:F:O:qdvh opt; do
    case $opt in
	C) configuration_path="$OPTARG"
	    ;;
	e) executables="$OPTARG"
	    ;;
	p) profiling_script="$OPTARG"
	    ;;
	x) acf_hot_th="$OPTARG"
	    ;;
	y) acf_cold_th="$OPTARG"
	    ;;
	Y) acf_cold_opts="$OPTARG"
	    ;;
	n) opt_nbruns="-n $OPTARG"
	    ;;
	b) opt_profdir="-B $OPTARG"
	    ;;
	F) flags_file="$OPTARG"
            ;;
	q) opt_debug="-q"
	    ;;
	d) opt_debug="-d"
	    ;;
	v) version; exit 0
	    ;;
	h) usage; exit 0
	    ;;
	?) usage; exit 2
	    ;;
    esac
done

shift $((OPTIND - 1))

if [ "$configuration_path" = "" ]; then
    echo "`basename $0`: error: missing configuration path" >&2
    exit 1
fi

if [ ! -f "$configuration_path/build.audit" -o ! -f "$configuration_path/run.audit" ]; then
    echo "`basename $0`: error: missing build/run audit, use atos-init tool for the initial setup" >&2
    exit 1
fi

imagepath="$executables"

if [ "$imagepath" = "" -a -f $configuration_path/targets ]; then
    dirnames=`for i in \`cat $configuration_path/targets\`; do dirname $i; done | uniq`
    imagepath=`echo $dirnames | sed 's/ /:/g'`
fi

if [ "$imagepath" = "" ]; then
    echo "`basename $0`: error: executables not specified" >&2
    exit 1
fi

if [ "$profiling_script" = "" -a -f "$configuration_path/profile.sh" ]; then
    profiling_script="$configuration_path/profile.sh"
fi

if [[ "$profiling_script" == "" || ! -x $profiling_script ]]; then
    echo "`basename $0`: error: profiling script not specified" >&2
    exit 1
fi

config_query() {
    $pythondir/atos/atos_lib.py config -C $configuration_path -u -t -q $*
}

acf_plugin_path=`config_query '$.compilers[*].plugin_acf'`

if [ "${acf_plugin_path}" == "" ]; then
    echo "`basename $0`: error: compiler not supported by acf plugin" >&2
    exit 1
fi

if [ "`config_query '$.compilers[*].plugins_enabled'`" != "1" ]; then
    echo "`basename $0`: error: compiler does not support plugins" >&2
    exit 1
fi

[ "$acf_cold_th" != "" ] || acf_cold_th=`expr 100 - $acf_hot_th` || true

$pythondir/atos/atos_toolkit.py --log=./acf.log -C $configuration_path \
    $opt_debug $opt_profdir $opt_nbruns \
    --gen-acf=$imagepath,$profiling_script,$acf_plugin_path,$acf_hot_th,$acf_cold_th,"$acf_cold_opts",$flags_file "$@"
