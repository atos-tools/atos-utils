#!/usr/bin/env bash
#
# Copyright (C) STMicroelectronics Ltd. 2012
#
# This file is part of ATOS.
#
# ATOS is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License v2.0
# as published by the Free Software Foundation
#
# ATOS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# v2.0 along with ATOS. If not, see <http://www.gnu.org/licenses/>.
#
#
# Usage: get usage with atos-explore-acf -h
#

set -e
[ "$DEBUG" = "" ] || set -x

dir=`cd \`dirname $0\`; pwd`
libdir=`cd $dir/../lib/atos; pwd`

configuration_path="./atos-configurations"
opt_seed=""
opt_debug=""
opt_profdir=""
nb_iter=100
nb_runs=1
#flags_file=$libdir/config/flags.loop.cfg
flags_file=""
opt_levels="-Os,-O2,-O3"
opt_variants="base,fdo,lto,fdo+lto"
executables=""
profiling_script=""
acf_plugin="acf_plugin.so"
acf_plugin_path=""
acf_hot_th=70
acf_cold_th=30
acf_cold_opts="-Os noinline cold"

#######################

version() {
    echo "atos-explore-acf version @VERSION@"
}

usage() {
    cat <<EOF

Usage: atos-explore-acf [options] [variant]

Configuration Options:
      -C <path> : configuration path [default: $configuration_path]
      -n <nb> : number of executions of <run_script> [default: $nb_runs]
      -b <path> : remote path to profile files [default: none]
      -e <executables> : executables to be instrumented [default: none]
      -p <profiling_script> : script to get profile information [default: none]
      -x <hot_th> : Hot functions treshold percentage [default: 70]
      -y <cold_th> : Cold functions treshold percentage [default: 30]
      -Y "<cold_opts>" : Cold functions options [default: "-Os noinline cold"]

Exploration Options:
      -F <flags_filename> : flags list filename [default: $flags_file]
      -O <optim_levels> : optimization levels [default: $opt_levels]
      -V <variants> : list of optimization variants [default: $opt_variants]
      -S <seed> : seed for random generator [default: none]
      -M <nb> : number of exploration loop iterations [default: $nb_iter]

Misc Options
      -q : quiet output
      -d : debug mode
      -h : output usage
      -v : output version

EOF
}

cleanup() {
    :
}
trap "cleanup; exit 3" TERM STOP
trap "cleanup" EXIT

while getopts C:e:p:x:y:Y:n:b:F:O:V:S:M:qdvh opt; do
    case $opt in
	C) configuration_path="$OPTARG"
	    ;;
	e) executables="$OPTARG"
	    ;;
	p) profiling_script="$OPTARG"
	    ;;
	x) acf_hot_th="$OPTARG"
	    ;;
	y) acf_cold_th="$OPTARG"
	    ;;
	Y) acf_cold_opts="$OPTARG"
	    ;;
	n) nb_runs="$OPTARG"
	    ;;
	b) opt_profdir="-B $OPTARG"
	    ;;
	F) flags_file="$OPTARG"
	    ;;
	O) opt_levels="$OPTARG"
	    ;;
	V) opt_variants="$OPTARG"
	    ;;
	S) opt_seed="--seed=$OPTARG"
	    ;;
	M) nb_iter="$OPTARG"
	    ;;
	q) opt_debug="-q"
	    ;;
	d) opt_debug="-d"
	    ;;
	v) version; exit 0
	    ;;
	h) usage; exit 0
	    ;;
	?) usage; exit 2
	    ;;
    esac
done

shift $((OPTIND - 1))

if [ "$configuration_path" = "" ]; then
    echo "`basename $0`: error: missing configuration path" >&2
    exit 1
fi

if [ ! -f "$configuration_path/build.audit" -o ! -f "$configuration_path/run.audit" ]; then
    echo "`basename $0`: error: missing build/run audit, use atos-init tool for the initial setup" >&2
    exit 1
fi

if [ "$executables" = "" ]; then
    echo "error: `basename $0`: error: executables not specified" >&2
    exit 1
fi

if [[ "$profiling_script" == "" || ! -x $profiling_script ]]; then
    echo "error: `basename $0`: error: profiling script not specified" >&2
    exit 1
fi

# Identify which acf_plugin.so to use based on host compiler
path_to_gcc=`which gcc`
if [ "$?" == "1" ]; then
    echo "error: gcc compiler not found" >&2
    exit 1
fi

gcc_version=`gcc -dumpversion`
machine=`gcc -dumpmachine`

case "${machine}" in
    x86_64-*)
      machine_dir=x86_64
      ;;
    i386-* | i686-*)
      machine_dir=i386
      ;;
    arm-*)
      machine_dir=arm
      ;;
    sh-*)
      machine_dir=sh4
      ;;
    *)
      echo "error: host machine ${machine} not supported by acf plugin"
      exit 1
      ;;
esac

# for gcc version, only take into account Major/Minor numbers
if [ ! -f ${libdir}/plugins/gcc-${gcc_version}/${machine_dir}/${acf_plugin} ]; then
    # get short version limited to Major/Minor
    major=`echo $gcc_version | sed -e 's/^\([0-9]*\)\.\([0-9]*\).*/\1/g'`
    minor=`echo $gcc_version | sed -e 's/^\([0-9]*\)\.\([0-9]*\).*/\2/g'`
    vers=$major.$minor

    gcc_list=`\ls -d ${libdir}/plugins/gcc-${vers}* 2>/dev/null| sort -r`

    # Take more recent gcc version matching Major/Minor
    for gcc_el in ${gcc_list}; do
	if [ -f ${gcc_el}/${machine_dir}/${acf_plugin} ]; then
	    acf_plugin_path=${gcc_el}/${machine_dir}/${acf_plugin}
	    break;
	fi
    done
else
    acf_plugin_path=${libdir}/plugins/gcc-${gcc_version}/${machine_dir}/${acf_plugin}
fi

if [ "${acf_plugin_path}" == "" ]; then
    echo "error: gcc version not supported by acf plugin: gcc-${vers}.*"
    exit 1
fi
if [ ! -f ${acf_plugin_path} ]; then
    echo "error: acf plugin not found: $acf_plugin_path" >&2
    exit 1
fi

if [ "$flags_file" == "" ]; then
    FLAGS_OPT=
else
    FLAGS_OPT=--flags=$flags_file
fi

$libdir/atos_toolkit.py --log=./acf.log -C $configuration_path \
    $opt_debug $opt_seed $opt_profdir --max=$nb_iter -n $nb_runs \
    --optlvl=$opt_levels --variants=$opt_variants $FLAGS_OPT \
    --gen-acf=$executables,$profiling_script,$acf_plugin_path,$acf_hot_th,$acf_cold_th,"$acf_cold_opts" "$@"

