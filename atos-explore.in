#!/usr/bin/env python
#
# Copyright (C) STMicroelectronics Ltd. 2012
#
# This file is part of ATOS.
#
# ATOS is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License v2.0
# as published by the Free Software Foundation
#
# ATOS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# v2.0 along with ATOS. If not, see <http://www.gnu.org/licenses/>.
#
#
# Usage: get usage with atos-explore -h
#

import sys, os
sys.path.append(os.path.abspath(os.path.join(
            os.path.dirname(__file__), '..', 'lib', 'atos', 'python')))
from atos import globals

import re
import argparse
from atos import atos_lib


parser = argparse.ArgumentParser(description='atos-explore',
                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument("commands",
                    nargs=argparse.REMAINDER,
                    help="commands to audit")
build_group = parser.add_argument_group('Build Options')
build_group.add_argument("-b",
                         dest="build_script",
                         metavar="<build_script>",
                         help="build_script to be executed")
build_group.add_argument("-f", "--force",
                         help="force rebuild by running build script instead of audited build",
                         action="store_true")
build_group.add_argument("-B",
                         metavar="<path>",
                         help="remote path to profile files",
                         default="")
run_group = parser.add_argument_group('Run Options')
run_group.add_argument("-r",
                       dest="run_script",
                       metavar="<run_script>",
                       help="run_script to be executed")
run_group.add_argument("-t",
                       dest="get_results_script",
                       metavar="<get_results_script>",
                       help="get_results_script to be executed")
run_group.add_argument("-n",
                       metavar="<nb>",
                       help="number of executions of <run_script>",
                       type=int,
                       default=1)
exec_group = parser.add_argument_group('Executable File Options')
exec_group.add_argument("-e",
                        metavar="<executables>",
                        help=" executables to be instrumented [default: args of command or all generated executables]")
conf_group = parser.add_argument_group('Configuration Options')
conf_group.add_argument("-C", dest="configuration_path",
                        metavar="<path>",
                        help="configuration path",
                        default="./atos-configurations")
conf_group.add_argument("-c",
                        help="clean results and profiles before exploration",
                        action="store_true")
misc_group = parser.add_argument_group('Misc Options')
misc_group.add_argument("-q", "--quiet",
                        help="quiet output",
                        action="store_true")
misc_group.add_argument("-d", "--debug",
                        help="debug mode",
                        action="store_true")
misc_group.add_argument("--dryrun",
                        help="dyrun mode",
                        action="store_true")
misc_group.add_argument("-v","--version",
                        help="output version string",
                        action="version",
                        version='%(prog)s version ' + globals.VERSION)
args = parser.parse_args()

if args.build_script:
    opt_build = " -b \"" + args.build_script + "\""
else:
    opt_build = ""

if args.run_script:
    opt_run = " -r \"" + args.run_script + "\""
else:
    opt_run = ""

if args.get_results_script:
    opt_results = " -t" + args.get_results_script
else:
    opt_results = ""

if args.e:
    executables = " -e " + args.e
elif args.commands:
    executables = " -e " + args.commands
else:
    executables = ""

if args.B:
    opt_remote_profile_path = " -B " + args.B
else:
    opt_remote_profile_path = ""

opt_nbruns = " -n " + str(args.n)
if args.quiet:
    opt_q = " -q"
else:
    opt_q = ""

if args.c:
    opt_c = " -c"
else:
    opt_c = ""

if args.force:
    opt_rebuild = " -f"
else:
    opt_rebuild = ""

command = os.path.join(globals.BINDIR,"atos-init") + " -C " + args.configuration_path \
          + opt_build + opt_run \
          + opt_results + opt_remote_profile_path + executables + opt_nbruns \
          + opt_rebuild + opt_q + opt_c
atos_lib.system(command, print_out=True, check_status=True)

for gopt in ['-O2', '-Os', '-O3']:
    for opts in ['', ' -flto', ' -funroll-loops', ' -flto -funroll-loops']:
        command_build = os.path.join(globals.BINDIR,"atos-build") + " -C " + args.configuration_path + opt_q + " -a'" + gopt + opts + "'"
        status, output = atos_lib.system(command_build, print_out=True)
        if status:
            command_run = os.path.join(globals.BINDIR,"atos-run") + " -C " + args.configuration_path + opt_q + " -r -a'" + gopt + opts + "'"
            atos_lib.system(command_run, print_out=True)

    command_prof = os.path.join(globals.BINDIR,"atos-profile") +  " -C " + args.configuration_path + opt_q + " -g'" + gopt + "'"
    if not atos_lib.system(command_prof, print_out=True)[0]: continue
    for opts in ['', ' -flto', ' -funroll-loops', ' -flto -funroll-loops']:
        command_build = os.path.join(globals.BINDIR, "atos-build") + " -C " + args.configuration_path + opt_q + " -u'" + gopt + "' -a'" + gopt + opts + "'"
        status,output = atos_lib.system(command_build, print_out=True)
        if status:
            command_run = os.path.join(globals.BINDIR, "atos-run") + " -C " + args.configuration_path + opt_q + " -r -u'" + gopt + "' -a'" + gopt + opts + "'"
            atos_lib.system(command_run, print_out=True)

if not args.quiet:
    print "Completed."
