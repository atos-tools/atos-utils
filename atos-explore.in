#!/usr/bin/env bash
#
# Copyright (C) STMicroelectronics Ltd. 2012
#
# This file is part of ATOS.
#
# ATOS is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License v2.0
# as published by the Free Software Foundation
#
# ATOS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# v2.0 along with ATOS. If not, see <http://www.gnu.org/licenses/>.
#
#
# Usage: get usage with atos-explore -h
#

set -e
[ "$DEBUG" = "" ] || set -x

dir=`dirname $0`
dir=`cd $dir; pwd`
PROOT=${PROOT:-proot}

run_script=""
build_script=""
executable=""
configuration_path="./atos-configurations"
verbose="0"
quiet="0"
clean="0"
opt_q=""

version() {
    echo "atos-explore version @VERSION@"
}

usage() {
    cat <<EOF

Usage: atos-explore [options] [executables...]

Run Options
      -b <build_script> : build_script to be executed [default: $build_script]

Run Options
      -r <run_script> : run_script to be executed [default: $run_script]

Executable File Options:
      -e <executables> : executables to be instrumented [default: args of command]

Configuration Options:
      -C <path> : configuration path [default: $configuration_path]
      -c : clean results and profiles before exploration

Misc Options
      -q : quiet output
      -d : debug mode
      -h : output usage
      -v : output version

EOF
}

cleanup() {
    [ ! -f "$tmpfile" ] || rm -f "$tmpfile"
}
trap "cleanup; exit 3" TERM STOP
trap "cleanup" EXIT
tmpfile=`mktemp /tmp/atos-inst.XXXXXX`


while getopts vhdqce:r:b:C: opt; do
    case $opt in
	e) executables="$OPTARG"
	    ;;
	C) configuration_path="$OPTARG"
	    ;;
	r) run_script="$OPTARG"
	    ;;
	b) build_script="$OPTARG"
	    ;;
	c) clean=1
	    ;;
	d) verbose=1
	    ;;
	q) quiet=1; opt_q=-q
	    ;;
	v) version; exit 0
	    ;;
	h) usage; exit 0
	    ;;
	?) usage; exit 2
	    ;;
    esac
done

shift $((OPTIND - 1))

[ "$executables" != "" ] || executables="$@"

if [ "$configuration_path" = "" ]; then
    echo "`basename $0`: error: missing configuration path" >&2
    exit 1
fi

mkdir -p "$configuration_path"
configuration_path=`cd "$configuration_path"; pwd`
if [ "$clean" = "1" ]; then
    [ "$quiet" = "1" ] || echo "Cleaning all profiles..."
    rm -rf "$configuration_path"/profiles
    [ "$quiet" = "1" ] || echo "Cleaning all results..."
    rm -rf "$configuration_path"/results.db
fi

if [ "$executables" = "" ]; then
    # By default audit all generated executables 
    executables=-a
fi

if [ "$build_script" != "" ]; then
    $dir/atos-audit $opt_q $build_script
elif [ ! -f "$configuration_path/build.audit" ]; then
    echo "`basename $0`: error: missing build audit, use -b option for specifying build script or use atos-audit tool" >&2
    exit 1
fi

if [ "$run_script" != "" ]; then
    $dir/atos-raudit $opt_q $run_script
elif [ ! -f "$configuration_path/run.audit" ]; then
    echo "`basename $0`: error: missing run audit, use -r option for specifying run script or use atos-raudit tool" >&2
    exit 1
fi

$dir/atos-deps $opt_q $executables

$dir/atos-run $opt_q -r # Will stop there if reference run fails

for gopt in "-O1" "-O2" "-Os" "-O3"; do
    for opts in "" "-flto"; do
	options="$gopt $opts"
	$dir/atos-opt $opt_q -a "$options" && $dir/atos-run $opt_q -r -a "$options" || true
    done
    failure=false
    $dir/atos-profile $opt_q -g "$gopt" || failure=true
    if $failure; then
	# skipping profile variants
	:
    else
	for opts in "" "-flto" "-funroll-loops" "-flto -funroll-loops"; do
	    options="$gopt $opts"
	    $dir/atos-opt $opt_q -u "$gopt" -a "$options" && $dir/atos-run $opt_q -r -u "$gopt" -a "$options" || true
	done
    fi
done
if [ "$quiet" != "1" ]; then
    echo "Best performance variant..."
    $dir/atos-play -p -f time
    echo "Best size variant..."
    $dir/atos-play -p -f size
fi
if [ "$quiet" != "1" ]; then
    echo "Completed."
fi
