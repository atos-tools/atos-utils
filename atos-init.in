#!/usr/bin/env bash
#
# Copyright (C) STMicroelectronics Ltd. 2012
#
# This file is part of ATOS.
#
# ATOS is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License v2.0
# as published by the Free Software Foundation
#
# ATOS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# v2.0 along with ATOS. If not, see <http://www.gnu.org/licenses/>.
#
#
# Usage: get usage with atos-init -h
#

set -e
[ "$DEBUG" = "" ] || set -x

dir=`cd \`dirname $0\`; pwd`
PROOT=${PROOT:-proot}

executables=""
configuration_path="./atos-configurations"
opt_rebuild=""
get_results_script=""
clean="0"
build_script=""
quiet="0"
run_script=""
opt_q=""
nbruns="1"
verbose="0"

version() {
    echo "atos-init version @VERSION@"
}

usage() {
    cat <<EOF

Usage: atos-init [options]

Configuration Options:
      -C <path> : configuration path [default: $configuration_path]
      -c : clean results and profiles before exploration

Executable File Options:
      -e <executables> : executables to be instrumented [default: args of command or all generated executables]

Build Options
      -b <build_script> : build_script to be executed [default: $build_script]
      -f : force rebuild by running build script instead of audited build

Run Options
      -r <run_script> : run_script to be executed [default: $run_script]
      -t <get_results_script> : get_results_script to be executed [default: none]
      -n <nb> : number of executions of <run_script> [default: $nbruns]

Misc Options
      -q : quiet output
      -d : debug mode
      -h : output usage
      -v : output version

EOF
}

cleanup() {
    :
}
trap "cleanup; exit 3" TERM STOP
trap "cleanup" EXIT

while getopts C:e:b:fr:t:n:cqdvh opt; do
    case $opt in
	C) configuration_path="$OPTARG"
	    ;;
	e) executables="$OPTARG"
	    ;;
	b) build_script="$OPTARG"
	    ;;
	f) opt_rebuild=-f
	    ;;
	r) run_script="$OPTARG"
	    ;;
	t) get_results_script="$OPTARG"
	    ;;
	n) nbruns="$OPTARG"
	    ;;
	c) clean=1
	    ;;
	q) quiet=1; opt_q=-q
	    ;;
	d) verbose=1
	    ;;
	v) version; exit 0
	    ;;
	h) usage; exit 0
	    ;;
	?) usage; exit 2
	    ;;
    esac
done

shift $((OPTIND - 1))

if [ "$configuration_path" = "" ]; then
    echo "`basename $0`: error: missing configuration path" >&2
    exit 1
fi

if [ "$opt_rebuild" = -f -a "$get_results_script" = "" -a "$executables" = "" ]; then
    echo "`basename $0`: error: when using forced mode (-f) with no custom results " \
    	 "script (-t) the list of executables must be specified (-e option)" >&2
    exit 1
fi

if [ "$executables" = "" ]; then
    # By default audit all generated executables 
    executables=-a
fi

mkdir -p "$configuration_path"
configuration_path=`cd "$configuration_path"; pwd`
if [ "$clean" = "1" ]; then
    if [ "$build_script" != "" ]; then
	[ "$quiet" = "1" ] || echo "Cleaning build audit..."
	rm -f "$configuration_path"/build.*
    fi
    if [ "$run_script" != "" ]; then
	[ "$quiet" = "1" ] || echo "Cleaning run audit..."
	rm -f "$configuration_path"/run.*
    fi
    [ "$quiet" = "1" ] || echo "Cleaning all profiles..."
    rm -rf "$configuration_path"/profiles
    [ "$quiet" = "1" ] || echo "Cleaning all results..."
    rm -rf "$configuration_path"/results.db
fi

if [ "$build_script" != "" ]; then
    $dir/atos-audit -C "$configuration_path" $opt_q $opt_rebuild $build_script
elif [ ! -f "$configuration_path/build.audit" ]; then
    echo "`basename $0`: error: missing build audit, use -b option for specifying " \
    	 "build script or use atos-audit tool" >&2
    exit 1
fi

if [ "$run_script" != "" ]; then
    $dir/atos-raudit -C "$configuration_path" $opt_q -t "$get_results_script" $run_script
elif [ ! -f "$configuration_path/run.audit" ]; then
    echo "`basename $0`: error: missing run audit, use -r option for specifying " \
    	 "run script or use atos-raudit tool" >&2
    exit 1
fi

if [ "$opt_rebuild" = "" ]; then
    $dir/atos-deps -C "$configuration_path" $opt_q $executables
else
    if [ "$get_results_script" = "" ]; then
	echo "$executables" >"$configuration_path"/targets
    fi
fi

$dir/atos-config -C "$configuration_path"

# reference run	
$dir/atos-run -C "$configuration_path" -n "$nbruns" $opt_q -r
