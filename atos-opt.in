#!/usr/bin/env bash
#
# Copyright (C) STMicroelectronics Ltd. 2012
#
# This file is part of ATOS.
#
# ATOS is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License v2.0
# as published by the Free Software Foundation
#
# ATOS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# v2.0 along with ATOS. If not, see <http://www.gnu.org/licenses/>.
#
#
# Usage: get usage with atos-opt -h
#

set -e
[ "$DEBUG" = "" ] || set -x

dir=`dirname $0`
dir=`cd $dir; pwd`
PROOT=${PROOT:-proot}

options=""
ccregexp="^\(gcc\|g++\|cc\|c++\)\$"
configuration_path="./atos-configurations"
jobs=4
dryrun=""
u_set=0
uopts=""
g_set=0
gopts=""
quiet=0
variant=""

version() {
    echo "atos-opt version @VERSION@"
}

usage() {
    cat <<EOF

Usage: atos-opt [options] [--] [command...]

Driver Options:
      -r <ccdriver_re> : specify the compiler driver as a regexp for the basename [default: $ccregexp]
      -c <ccdriver> : alternatively specify the exact compiler driver basename

Optimization Options:
      -a "options" : append given options to the compilation commands [default: $options]
      -w <variant> : identifier of variant [default: REF or infered from -a]

Configuration Options:
      -C <path> : configuration path [default: $configuration_path]

Build options:
      -j <jobs>: use <jobs> parallel thread when possible for building [default: $jobs]
      -n : dry run, output build commands only

Profile options:
      -u "$opts" : use profile variant deduced by $opts [default: none]
      -g "$opts" : use profile variant deduced by $opts [default: none]
      -p <path> : path to profile files [default: $configuration_path/profiles/<pvariant>]

Misc Options
      -q : quiet output
      -h : output usage
      -v : output version

EOF
}

cleanup() {
    :
}
trap "cleanup; exit 3" TERM STOP
trap "cleanup" EXIT

while getopts vhqnw:C:j:c:r:a:u:g:p: opt; do
    case $opt in
	a) options="$OPTARG"
	    ;;
	c) ccregexp="^$OPTARG\$"
	    ;;
	r) ccregexp="$OPTARG"
	    ;;
	j) jobs="$OPTARG"
	    ;;
	p) profile_path="$OPTARG"
	    ;;
	u) u_set=1; uopts="$OPTARG"
	    ;;
	g) g_set=1; gopts="$OPTARG"
	    ;;
	w) variant="$OPTARG"
	    ;;
	n) dryrun=1
	    ;;
	q) quiet=1
	    ;;
	C) configuration_path="$OPTARG"
	    ;;
	v) version; exit 0
	    ;;
	h) usage; exit 0
	    ;;
	?) usage; exit 2
	    ;;
    esac
done

shift $((OPTIND - 1))

variant_hash() {
    echo "$1" | md5sum | cut -f 1 -d ' '
}

if [ "$g_set" = 1 -a "$u_set" = 1 ]; then
    echo "`basename $0`: error: options -u and -g cannot by specified at the same time" >&2
    exit 1
fi    

if [ "$g_set" = 1 ]; then
    pvariant=REF
    if [ "$gopts" != "" ]; then
	pvariant=OPT`echo $gopts | sed 's/ //g'`
	
    fi
    if [ "$profile_path" = "" ]; then
	profile_path="$configuration_path/profiles/`variant_hash $pvariant`"
    fi
    mkdir -p "$profile_path"
    echo "$pvariant" > "$profile_path/variant.txt"
    profile_path=`cd "$profile_path"; pwd`
    find "$profile_path" -name '*.gcda' | xargs rm -f
    APFLAGS="-fprofile-generate -fprofile-dir=$profile_path"
fi

if [ "$u_set" = 1 ]; then
    pvariant=REF
    if [ "$uopts" != "" ]; then
	pvariant=OPT`echo $uopts | sed 's/ //g'`
    fi
    if [ "$profile_path" = "" ]; then
	profile_path="$configuration_path/profiles/`variant_hash $pvariant`"
    fi
    mkdir -p "$profile_path"
    profile_path=`cd "$profile_path"; pwd`
    APFLAGS="-fprofile-use -fprofile-correction -Wno-error=coverage-mismatch -fprofile-dir=$profile_path"
fi

if [ "$variant" = "" ]; then
    if [ "$options" != "" -o "$pvariant" != "" ]; then
	if [ "$g_set" = 1 ]; then
	    variant=OPT-fprofile-generate$pvariant`echo $options | sed 's/ //g'`
	elif [ "$u_set" = 1 ]; then
	    variant=OPT-fprofile-use$pvariant`echo $options | sed 's/ //g'`
	else
	    variant=OPT$pvariant`echo $options | sed 's/ //g'`
	fi
    else
	variant=REF
    fi
fi

failure=false
mkdir -p "$configuration_path/logs"
[ "$quiet" = "1" ] || echo "Building variant $variant..."
if [ -f "$configuration_path/build.mk" ]; then
    # If the configuration path contains a build.mk execute it
    make ${dryrun:+-n} -j $jobs -f $configuration_path/build.mk ACFLAGS="$APFLAGS $options" >"$configuration_path/logs/build-$variant.log" 2>&1 || failure=true
else
    env PROOT_ADDON_CC_OPTS=1 PROOT_ADDON_CC_OPTS_ARGS="$APFLAGS $options" PROOT_ADDON_CC_OPTS_CCRE="$ccregexp" $PROOT -w $PWD / ${1+"$@"}  >"$configuration_path/logs/build-$variant.log"  2>&1 || failure=true
fi
if $failure; then
    [ "$quiet" = 1 ] || echo "FAILURE while building variant $variant..."
    exit 2
fi
