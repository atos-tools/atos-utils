#!/usr/bin/env bash
#
# Copyright (C) STMicroelectronics Ltd. 2012
#
# This file is part of ATOS.
#
# ATOS is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License v2.0
# as published by the Free Software Foundation
#
# ATOS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# v2.0 along with ATOS. If not, see <http://www.gnu.org/licenses/>.
#
#
# Usage: get usage with atos-replay -h
#

set -e
[ "$DEBUG" = "" ] || set -x

dir=`cd \`dirname $0\`; pwd`
libdir=`cd $dir/../lib/atos; pwd`

configuration_path="./atos-configurations"
qualif_config_path="./atos-qualif"
executables=""
run_script=""
get_results_script=""
opt_nbruns=""
quiet=0
opt_q=""

#######################

version() {
    echo "atos-replay version @VERSION@"
}

usage() {
    cat <<EOF

Usage: atos-replay [options]

Configuration Options:
      -C <path> : configuration path [default: $configuration_path]
      -R <path> : path for qualified results [default: $qualif_config_path]

Executable File Options:
      -e <executables> : executables to be instrumented [args of command or all generated executables]

Run Options:
      -r <run_script> : run_script to be executed [default: $run_script]
      -t <get_results_script> : get_results_script to be executed [default: none]
      -n <nb> : number of executions [default: 1]

Misc Options
      -q : quiet output
      -h : output usage
      -v : output version

EOF
}

cleanup() {
    :
}
trap "cleanup; exit 3" TERM STOP
trap "cleanup" EXIT

while getopts C:R:e:r:t:n:qvh opt; do
    case $opt in
	C) configuration_path="$OPTARG"
	    ;;
	R) qualif_config_path="$OPTARG"
	    ;;
	e) executables="$OPTARG"
	    ;;
	r) run_script="$OPTARG"
	    ;;
	t) get_results_script="$OPTARG"
	    ;;
	n) opt_nbruns="-n $OPTARG"
	    ;;
	q) quiet=1; opt_q=-q
	    ;;
	v) version; exit 0
	    ;;
	h) usage; exit 0
	    ;;
	?) usage; exit 2
	    ;;
    esac
done

shift $((OPTIND - 1))


if [ "$configuration_path" = "" ]; then
    echo "`basename $0`: error: missing configuration path" >&2
    exit 1
fi

getfield()
{
    field=$1; shift
    regexp="^.*[\"\']$field[\"\']: u\?[\"\']\([^\"\']*\)[\"\'].*$"
    echo $* | grep "$regexp" | sed "s/$regexp/\1/"
}

get_frontier_records()
{
    $libdir/atos_lib.py speedups -C $configuration_path --frontier
}


[ -f $qualif_config_path/results.db ] || \
    $libdir/atos_lib.py create_db -C $qualif_config_path --type results_db 2>&1

[ "$executables" != "" -a ! -f "$configuration_path/targets" -a -f "$qualif_config_path/targets" ] \
    || cp $configuration_path/targets $qualif_config_path

# reference build/run
$dir/atos-build -C "$configuration_path" $opt_q
$dir/atos-run -C "$qualif_config_path" $opt_q -t "$get_results_script" $opt_nbruns -e "$executables" -r $run_script

while read line; do

    variant=`getfield variant $line`
    a_opts=`getfield conf $line`
    u_opts=`getfield uconf $line`

    if [ "$u_opts" != "" ]; then
	$dir/atos-build -C "$configuration_path" $opt_q -a "$a_opts" -u "$u_opts" \
	    && $dir/atos-run -C "$qualif_config_path" $opt_q -r -t "$get_results_script" $opt_nbruns -a "$a_opts" -u "$u_opts" -e "$executables" $run_script \
	    || true
    else
	$dir/atos-build -C "$configuration_path" $opt_q -a "$a_opts" \
	    && $dir/atos-run -C "$qualif_config_path" $opt_q -r -t "$get_results_script" $opt_nbruns -a "$a_opts" -e "$executables" $run_script \
	    || true
    fi

done < <(get_frontier_records)

