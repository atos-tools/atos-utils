#!/usr/bin/env bash
#
# Copyright (C) STMicroelectronics Ltd. 2012
#
# This file is part of ATOS.
#
# ATOS is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License v2.0
# as published by the Free Software Foundation
#
# ATOS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# v2.0 along with ATOS. If not, see <http://www.gnu.org/licenses/>.
#
#
# Usage: get usage with atos-run -h
#

set -e
[ "$DEBUG" = "" ] || set -x

dir=`dirname $0`
dir=`cd $dir; pwd`
libdir=`cd $dir/../lib/atos; pwd`

executables=""
identifier=""
variant=""
fd=""
configuration_path="./atos-configurations"
record=0
u_set=0
uopts=""
g_set=0
gopts=""
quiet=0
silent=0
remote_profile_path=""
b_set=0
get_results_script=""
nbruns="1"
n_set=0

version() {
    echo "atos-run version @VERSION@"
}

usage() {
    cat <<EOF

Usage: atos-run [options] [--] [command...]

Executable File Options:
      -e <executables> : executables to be instrumented [default: first arg of command]

Identification options:
      -i <identifier> : identifier of run [default: executables basename]
      -w <variant> : identifier of variant [default: REF]
      -a <options> : if specified, infer variant from option set

Output options:
      -o file : file reference for appending results [default: none]
      -f fd : fd reference for appending results [default: 2]

Configuration Options:
      -C <path> : configuration path [default: $configuration_path]

Recording options:
      -r : record results
      -s : silent mode, do not emit perf/size results
      -t <get_results_script> : get_results_script to be executed [default: none]

Profile options:
      -u "opts" : use profile variant deduced by opts [default: none]
      -g "opts" : use profile variant deduced by opts [default: none]
      -b <path> : remote path to profile files [default: none]

Run Options:
      -n <nb> : number of executions [default: $nbruns]

Misc Options
      -q : quiet output
      -h : output usage
      -v : output version

EOF
}

cleanup() {
    [ ! -f "$tmpfile" ] || rm -f "$tmpfile"
    [ ! -f "$tmpfile2" ] || rm -f "$tmpfile2"
}
trap "cleanup; exit 3" TERM STOP
trap "cleanup" EXIT
tmpfile=`mktemp /tmp/atos-inst.XXXXXX`
tmpfile2=`mktemp /tmp/atos-inst.XXXXXX`


while getopts vhqrsb:t:o:f:e:a:i:w:u:g:C:n: opt; do
    case $opt in
	e) executables="$OPTARG"
	    ;;
	i) identifier="$OPTARG"
	    ;;
	w) variant="$OPTARG"
	    ;;
	a) options="$OPTARG"
	    ;;
	u) u_set=1; uopts="$OPTARG"
	    ;;
	g) g_set=1; gopts="$OPTARG"
	    ;;
	f) fd="$OPTARG"
	    ;;
	o) file="$OPTARG"
	    ;;
	C) configuration_path="$OPTARG"
	    ;;
	b) remote_profile_path="$OPTARG"; b_set=1
	    ;;
	t) get_results_script="$OPTARG"
	    ;;
	n) nbruns="$OPTARG"; n_set=1
	    ;;
	r) record=1
	    ;;
	s) silent=1
	    ;;
	q) quiet=1
	    ;;
	v) version; exit 0
	    ;;
	h) usage; exit 0
	    ;;
	?) usage; exit 2
	    ;;
    esac
done

shift $((OPTIND - 1))

variant_hash() {
    echo "$1" | md5sum | cut -f 1 -d ' '
}

get_config() {
    $libdir/atos_lib.py config -C $configuration_path --get "$1"
}

if [ "$get_results_script" = "" -a -f "$configuration_path/get_res.sh" ]; then
    get_results_script="$configuration_path/get_res.sh"
fi

if [ "$get_results_script" = "" ]; then
    if [ "$executables" = "" ]; then
	if [ -f "$configuration_path/targets" ]; then
	    executables=`cat "$configuration_path/targets"`
	else
	    echo "error: `basename $0`: error: no target executable specified" >&2
	    exit 1
	fi
    fi
    if [ "$identifier" = "" ]; then
	identifier=""
	sep=""
	for i in $executables; do
	    identifier="$identifier$sep"`basename "$i"`
	    sep="-"
	done
    fi
else
    executables=""
fi

if [ "$g_set" = 1 -a "$u_set" = 1 ]; then
    echo "`basename $0`: error: options -u and -g cannot by specified at the same time" >&2
    exit 1
fi    

if [ "$g_set" = 1 ]; then
    pvariant=-fprofile-generate
    if [ "$gopts" != "" ]; then
	pvariant=-fprofile-generate`echo $gopts | sed 's/ //g'`
    fi
fi

if [ "$u_set" = 1 ]; then
    pvariant=-fprofile-use
    if [ "$uopts" != "" ]; then
	pvariant=-fprofile-use`echo $uopts | sed 's/ //g'`
    fi
fi

[ "$b_set" = "1" ] || remote_profile_path=`get_config default_values.remote_profile_path`

if [ "$variant" = "" ]; then
    if [ "$options" != "" -o "$pvariant" != "" ]; then
	variant=OPT$pvariant`echo $options | sed 's/ //g'`
    else
	variant=REF
    fi
fi

if [ "$file" = "" -a "$fd" = "" -a "$record" = 0 ]; then
    fd=2 # stderr by default
fi

if [ "$file" != "" -a "$fd" != "" ]; then
    echo "`basename $0`: error: options -o and -f cannot by specified at the same time" >&2
    exit 1
fi

[ "$quiet" = 1 ] || echo "Running variant $variant..."
exe_time=0
exe_size=0
failure=false

get_size() {
    local exes="${1?}"
    exe_size=0
    for exe in $exes; do
	exe="`which "$exe" 2>/dev/null`"
	[ "$exe" != "" ] || failure=true
	local -i size=`/usr/bin/size "$exe" | tail -1 | awk '{print $4;}'`
	exe_size=$((exe_size+size))
    done
}

profile_path() {
    lpvariant=REF
    if [ "$gopts" != "" ]; then
	lpvariant=OPT`echo $gopts | sed 's/ //g'`
    fi
    absolute_configuration_path=`cd $configuration_path; pwd`
    echo "$absolute_configuration_path/profiles/`variant_hash $lpvariant`"
}

get_time() {
    if [ "$remote_profile_path" != "" ]; then
	export REMOTE_PROFILE_DIR=$remote_profile_path
	export LOCAL_PROFILE_DIR=`profile_path`
    fi
    /usr/bin/time -p ${1+"$@"} 2>&1 | tee $tmpfile | sed -e '/^real /d' -e '/^user /d' -e '/^sys /d'
    [ ${PIPESTATUS[0]} = 0 ] || failure=true
    exe_time=`tail -3 $tmpfile | awk '{if ($1 == "user") { print int($2 * 1000); }}'`
    # prefer time info from log
    if [ `grep -c "^user " $tmpfile` -ge 2 ]; then
	exe_time=`grep "^user " $tmpfile |head -n -1 | awk '{SUM += $2 } END { print (SUM * 1000) }'`
    fi
    unset REMOTE_PROFILE_DIR LOCAL_PROFILE_DIR
}

output_run_result() {
    entry="target:$identifier"
    entry="$entry,variant:$variant"
    entry="$entry,version:@VERSION@"
    entry="$entry,conf:$options"
    [ "$u_set" = 0 ] || entry="$entry,uconf:$uopts"
    [ "$g_set" = 0 ] || entry="$entry,gconf:$uopts"
    entry="$entry,size:$exe_size"
    entry="$entry,time:$exe_time"

    if [ "$file" != "" ]; then
	$libdir/atos_lib.py add_result -r "$entry" $file
    elif [ "$fd" != "" ]; then
	$libdir/atos_lib.py add_result -r "$entry" -C- >&$fd
    else
	$libdir/atos_lib.py add_result -r "$entry" -C $configuration_path 
    fi
}

mkdir -p "$configuration_path/logs"
logfile="$configuration_path/logs/run-`variant_hash $variant`.log"

if [ "$executables" != "" ]; then
    get_size "$executables" >> "$logfile" 2>&1
fi

[ "$n_set" = 1 ] || nbruns=`get_config default_values.nb_runs`
[ "$nbruns" != "" ] || nbruns=1

n=1
while [ "$n" -le "$nbruns" ]; do
    echo "Running variant $variant $n/$nbruns" >>"$logfile"
    rm -f "$logfile.$n"
    if [ -f "$configuration_path/run.sh" ]; then
	get_time "$configuration_path/run.sh" >> "$logfile.$n" 2>&1
    else
	get_time ${1+"$@"} >> "$logfile.$n" 2>&1
    fi

    if $failure; then
	exe_size=FAILURE
	exe_time=FAILURE
    fi

    if [ "$silent" != 1 ]; then
	if $failure; then
	    [ "$get_results_script" = "" ] || identifier=FAILURE
	    output_run_result
	else
	    if [ "$get_results_script" != "" ]; then
		$get_results_script < "$logfile.$n" >>$tmpfile 2>&1 || failure=true
	    fi
	    if [ `grep -c "^ATOS: " $tmpfile` -ge 1 ]; then
		identifiers=`grep "^ATOS: " $tmpfile | awk '{ print $2 }' | sed 's/://' | sort -u`
		for identifier in $identifiers; do
		    exe_time=`grep "^ATOS: $identifier: time: " $tmpfile | awk '{ print $4 }'`
		    exe_size=`grep "^ATOS: $identifier: size: " $tmpfile | awk '{ print $4 }'`
		    if [ "$exe_time" == "" -o "$exe_size" == "" ]; then
			exe_size=FAILURE
			exe_time=FAILURE
		    fi
		    output_run_result
		done
	    else
		output_run_result
	    fi
	fi
    fi
    cat "$logfile.$n" >> "$logfile"
    rm "$logfile.$n"
    if $failure; then
	[ "$quiet" = 1 ] || echo "FAILURE while running variant $variant..."
	echo "FAILURE while running variant $variant" >>"$logfile"
	exit 2
    else
	echo "SUCCESS running variant $variant" >>"$logfile"
    fi
    n=`expr $n + 1`
done
