#if GCC_VERSION >= 40400

// Inline functions marked by always_inline and functions whose body
// seems smaller than the function call overhead early before doing
// -fprofile-generate instrumentation and real inlining pass. Doing so
// makes profiling significantly cheaper and usually inlining faster on
// programs having large chains of nested wrapper functions.
// Enabled by default.
// pass_early_local_passes(!in_lto)
//     pass_early_inline(NULL)
//     --> cgraph_early_inlining
-fearly-inlining|-fno-early-inlining

#if GCC_VERSION >= 40500

// Specify growth that early inliner can make. In effect it increases
// amount of inlining for code having large abstraction penalty. The
// default value is 10.
// pass_early_local_passes(!in_lto)
//     pass_early_inline(NULL)
//     --> cgraph_early_inlining
//         --> cgraph_decide_inlining_incrementally*
// default value is 10, use 100 as max value
--param early-inlining-insns=[5..100,5]

// Limit of iterations of early inliner. This basically bounds number of
// nested indirect calls early inliner can resolve. Deeper chains are
// still handled by late inlining. The default value is 10.
// pass_early_local_passes(!in_lto)
//     pass_early_inline(NULL)
//     --> cgraph_early_inlining*
// only if (optimize && !-fno-inline && -fearly-inlining
--param max-early-inliner-iterations=[4..20,2]

#endif // GCC_VERSION >= 40500

// Inline also indirect calls that are discovered to be known at compile
// time thanks to previous inlining. This option has any effect only when
// inlining itself is turned on by the -finline-functions or
// -finline-small-functions options.
// Enabled at level -O2.
//  all_regular_ipa_passes(in_lto)
//  --> pass_ipa_inline
//      --> cgraph_decide_inlining *
//          --> cgraph_decide_inlining_of_small_functions *
//              --> cgraph_decide_recursive_inlining
//                  --> cgraph_mark_inline_edge *
//              --> cgraph_mark_inline_edge *
//          --> cgraph_flatten
//              --> cgraph_mark_inline_edge *
//  
// all_small_ipa_passes(!in_lto)
// --> pass_early_local_passes(!in_lto)
//         pass_early_inline(NULL)
//         --> cgraph_early_inlining
//             --> cgraph_flatten
//                 --> cgraph_mark_inline_edge *
//             --> cgraph_decide_inlining_incrementally
//                 --> cgraph_mark_inline_edge *
// all_regular_ipa_passes(in_lto)
// --> pass_ipa_inline
//     --> inline_generate_summary
//         --> add_new_function
//             --> analyze_function *
//         --> analyze_function *
// all_regular_ipa_passes(in_lto)
// --> pass_ipa_inline
//     --> inline_read_summary *
// all_regular_ipa_passes(in_lto)
// --> pass_ipa_inline
//     --> inline_write_summary *
-findirect-inlining|-fno-indirect-inlining

// Integrate all simple functions into their callers. The compiler
// heuristically decides which functions are simple enough to be worth
// integrating in this way.  If all calls to a given function are
// integrated, and the function is declared static, then the function is
// normally not output as assembler code in its own right.
// Enabled at level -O3.
//  all_regular_ipa_passes(in_lto)
//  --> pass_ipa_inline
//      --> cgraph_decide_inlining
//          --> cgraph_decide_inlining_of_small_functions
//              --> cgraph_decide_recursive_inlining *
-finline-functions|-fno-inline-functions

// Consider all static functions called once for inlining into their
// caller even if they are not marked inline. If a call to a given
// function is integrated, then the function is not output as assembler
// code in its own right.
// Enabled at levels -O1, -O2, -O3 and -Os.
//  all_regular_ipa_passes(in_lto)
//  --> pass_ipa_inline
//      --> cgraph_decide_inlining *
-finline-functions-called-once|-fno-inline-functions-called-once

// Integrate functions into their callers when their body is smaller than
// expected function call code (so overall size of program gets
// smaller). The compiler heuristically decides which functions are
// simple enough to be worth integrating in this way.
// Enabled at level -O2.
//  cgraph_decide_inlining_incrementally
//  --> cgraph_check_inline_limits*
//  cgraph_decide_inlining
//  --> cgraph_check_inline_limits*
//  --> cgraph_decide_inlining_of_small_functions
//      --> cgraph_check_inline_limits*
-finline-small-functions|-fno-inline-small-functions

// Specifies maximal growth of large function caused by inlining in
// percents. The default value is 100 which limits large function growth
// to 2.0 times the original size.
//  cgraph_decide_inlining_incrementally
//  --> cgraph_check_inline_limits*
//  cgraph_decide_inlining
//  --> cgraph_check_inline_limits*
//  --> cgraph_decide_inlining_of_small_functions
//      --> cgraph_check_inline_limits*
--param large-function-growth=[0..500,50]

// Specifies maximal growth of large stack frames caused by inlining in
// percents. The default value is 1000 which limits large stack frame
// growth to 11 times the original size.
//  cgraph_decide_inlining_incrementally
//  --> cgraph_check_inline_limits*
//  cgraph_decide_inlining
//  --> cgraph_check_inline_limits*
//  --> cgraph_decide_inlining_of_small_functions
//      --> cgraph_check_inline_limits*
--param large-stack-frame-growth=[0..5000,500]

// Several parameters control the tree inliner used in gcc. This number
// sets the maximum number of instructions (counted in GCC's internal
// representation) in a single function that the tree inliner will
// consider for inlining. This only affects functions declared inline and
// methods implemented in a class declaration (C++). The default value is
// 400.
//  cgraph_decide_inlining_of_small_functions
//  --> update_caller_keys
//      --> cgraph_default_inline_p*
//  --> cgraph_default_inline_p*
//  --> update_callee_keys
//      --> cgraph_default_inline_p*
//      --> update_caller_keys
//          --> cgraph_default_inline_p*
//  --> update_all_callee_keys
//      --> update_caller_keys
//          --> cgraph_default_inline_p*
//  --> add_new_edges_to_heap
//      --> cgraph_default_inline_p*
//  cgraph_decide_inlining_incrementally
//  --> cgraph_default_inline_p*
--param max-inline-insns-single=[200..2000,200]

// When you use -finline-functions (included in -O3), a lot of functions
// that would otherwise not be considered for inlining by the compiler
// will be investigated. To those functions, a different (more
// restrictive) limit compared to functions declared inline can be
// applied. The default value is 40.
//  pass_early_local_passes(!in_lto)
//  --> pass_all_early_optimizations
//      --> pass_split_functions(-fpartial-inlining)
//          --> execute_split_functions
//              --> find_split_points
//                  --> consider_split*
//  ipa_sra_preliminary_function_checks*
//  cgraph_default_inline_p*
--param max-inline-insns-auto=[20..200,20]
// Specifies maximal overall growth of the compilation unit caused by
// inlining. The default value is 30 which limits unit growth to 1.3
// times the original size.
//  all_regular_ipa_passes(in_lto)
//  --> pass_ipa_inline
//      --> cgraph_decide_inlining
//          --> cgraph_decide_inlining_of_small_functions
//              --> compute_max_insns*
--param inline-unit-growth=[0..100,10]

// Specifies maximum recursion depth used by the recursive inlining.  For
// functions declared inline --param max-inline-recursive-depth is taken
// into account. For function not declared inline, recursive inlining
// happens only when -finline-functions (included in -O3) is enabled and
// --param max-inline-recursive-depth-auto is used. The default value is
// 8.
// only if (!-Os && declared_inline(decl))
//  all_regular_ipa_passes(in_lto)
//  --> pass_ipa_inline
//      --> cgraph_decide_inlining
//          --> cgraph_decide_inlining_of_small_functions
//              --> cgraph_decide_recursive_inlining*
--param max-inline-recursive-depth=[2..16,2]
--param max-inline-recursive-depth-auto=[2..16,2]

// Recursive inlining is profitable only for function having deep
// recursion in average and can hurt for function having little recursion
// depth by increasing the prologue size or complexity of function body
// to other optimizers.  When profile feedback is available (see
// -fprofile-generate) the actual recursion depth can be guessed from
// probability that function will recurse via given call expression. This
// parameter limits inlining only to call expression whose probability
// exceeds given threshold (in percents). The default value is 10.
//  all_regular_ipa_passes(in_lto)
//  --> pass_ipa_inline
//      --> cgraph_decide_inlining
//          --> cgraph_decide_inlining_of_small_functions
//              --> cgraph_decide_recursive_inlining*
--param min-inline-recursive-probability=[5..100,5]

// Specifies maximum number of instructions out-of-line copy of self
// recursive inline function can grow into by performing recursive
// inlining.  For functions declared inline --param
// max-inline-insns-recursive is taken into account. For function not
// declared inline, recursive inlining happens only when
// -finline-functions (included in -O3) is enabled and --param
// max-inline-insns-recursive-auto is used. The default value is 450.
// only if (!-Os && declared_inline(decl))
//  all_regular_ipa_passes(in_lto)
//  --> pass_ipa_inline
//      --> cgraph_decide_inlining
//          --> cgraph_decide_inlining_of_small_functions
//              --> cgraph_decide_recursive_inlining*
--param max-inline-insns-recursive=[100..1000,100]
--param max-inline-insns-recursive-auto=[100..1000,100]

// The limit specifying really large functions. For functions larger than
// this limit after inlining, inlining is constrained by --param
// large-function-growth. This parameter is useful primarily to avoid
// extreme compilation time caused by non-linear algorithms used by the
// backend. The default value is 2700.
//  cgraph_decide_inlining_incrementally
//  --> cgraph_check_inline_limits*
//  cgraph_decide_inlining
//  --> cgraph_check_inline_limits*
//  --> cgraph_decide_inlining_of_small_functions
//      --> cgraph_check_inline_limits*
--param large-function-insns=[500..5000,500]

// The limit specifying large stack frames. While inlining the algorithm
// is trying to not grow past this limit too much. Default value is 256
// bytes.
//  cgraph_decide_inlining_incrementally
//  --> cgraph_check_inline_limits*
//  cgraph_decide_inlining
//  --> cgraph_check_inline_limits*
//  --> cgraph_decide_inlining_of_small_functions
//      --> cgraph_check_inline_limits*
--param large-stack-frame=[50..1000,50]

// The limit specifying large translation unit. Growth caused by inlining
// of units larger than this limit is limited by --param
// inline-unit-growth. For small units this might be too tight (consider
// unit consisting of function A that is inline and B that just calls A
// three time. If B is small relative to A, the growth of unit is 300\%
// and yet such inlining is very sane. For very large units consisting of
// small inlineable functions however the overall unit growth limit is
// needed to avoid exponential explosion of code size. Thus for smaller
// units, the size is increased to --param large-unit-insns before
// applying --param inline-unit-growth. The default is 10000
//  all_regular_ipa_passes(in_lto)
//  --> pass_ipa_inline
//      --> cgraph_decide_inlining
//          --> cgraph_decide_inlining_of_small_functions
//              --> compute_max_insns*
//  all_regular_ipa_passes(in_lto)
//  --> pass_ipa_cp(-fipa-cp)
//      --> ipcp_driver
//          --> ipcp_insert_stage*
--param large-unit-insns=[2000..40000,2000]
#endif // GCC_VERSION >= 40400

#if GCC_VERSION >= 40400 && GCC_MAX_VERSION < 40500
// flags for 4.4 only

// Specify cost of call instruction relative to simple arithmetics
// operations (having cost of 1). Increasing this cost disqualifies
// inlining of non-leaf functions and at the same time increases size of
// leaf function that is believed to reduce function size by being
// inlined. In effect it increases amount of inlining for code having
// large abstraction penalty (many functions that just pass the arguments
// to other functions) and decrease inlining for code with low
// abstraction penalty. The default value is 12.
--param inline-call-cost=[2..30,2]
#endif // GCC_VERSION >= 40400 && GCC_MAX_VERSION < 40500

#if GCC_VERSION >= 40600

// Inline parts of functions. This option has any effect only when
// inlining itself is turned on by the -finline-functions or
// -finline-small-functions options.
// Enabled at level -O2.
//  pass_early_local_passes(!in_lto)
//  --> pass_all_early_optimizations
//      --> pass_split_functions(-fpartial-inlining)
//  all_small_ipa_passes
//  --> pass_ipa_tree_profile(-fbranch-probabilities || -ftest-coverage || -fprofile-arcs));
//      --> pass_feedback_split_functions(-fpartial-inlining)
-fpartial-inlining|-fno-partial-inlining
//  pass_early_local_passes(!in_lto)
//  --> pass_all_early_optimizations
//      --> pass_split_functions(-fpartial-inlining)
//      --> execute_split_functions
//          --> find_split_points
//              --> consider_split*
--param partial-inlining-entry-probability=[0..100,10]

#endif

#if CLANG_VERSION > 0
// Control the amount of inlining to perform (default = 225)
-mllvm -inline-threshold=[100..500]

#endif //CLANG_VERSION > 0

#if 0

// Don't pay attention to the inline keyword. Normally this option is
// used to keep the compiler from expanding any functions inline. Note
// that if you are not optimizing, no functions can be expanded inline.
// -finline

// By default, GCC limits the size of functions that can be inlined. This
// flag allows coarse control of this limit. n is the size of functions
// that can be inlined in number of pseudo instructions.  Inlining is
// actually controlled by a number of parameters, which may be specified
// individually by using --param name=value. The -finline-limit=n option
// sets some of these parameters as follows: max-inline-insns-single is
// set to n/2.  max-inline-insns-auto is set to n/2.  See below for a
// documentation of the individual parameters controlling inlining and
// for the defaults of these parameters.  Note: there may be no value to
// -finline-limit that results in default behavior.  Note: pseudo
// instruction represents, in this particular context, an abstract
// measurement of function's size. In no way does it represent a count of
// assembly instructions and as such its exact meaning might change from
// one release to an another.
// disabled: dup of max-inline-insns-single and max-inline-insns-auto
// -finline-limit=[2..64]

#endif

#if GCC_VERSION >= 40400

// flag dependencies

-finline :: -fearly-inlining
-finline :: -finline-functions
-finline :: -finline-functions-called-once
-finline :: -finline-small-functions
-finline-functions :: -findirect-inlining
-finline-functions :: -fpartial-inlining
-finline-small-functions :: -findirect-inlining
-finline-small-functions :: -fpartial-inlining
-fearly-inlining :: --param early-inlining-insns=
-fearly-inlining :: --param max-early-inliner-iterations=
-fpartial-inlining :: --param partial-inlining-entry-probability=
-Os, -O1, -O2, -O3 :: --param max-inline-recursive-depth=
-Os, -O1, -O2, -O3 :: --param max-inline-recursive-depth-auto=
-Os, -O1, -O2, -O3 :: --param min-inline-recursive-probability=
-Os, -O1, -O2, -O3 :: --param max-inline-insns-recursive=
-Os, -O1, -O2, -O3 :: --param max-inline-insns-recursive-auto=
#if GCC_VERSION >= 40600
-Ofast :: --param max-inline-recursive-depth=
-Ofast :: --param max-inline-recursive-depth-auto=
-Ofast :: --param min-inline-recursive-probability=
-Ofast :: --param max-inline-insns-recursive=
-Ofast :: --param max-inline-insns-recursive-auto=
#endif
-finline :: --param max-inline-insns-single=
-finline :: --param max-inline-insns-auto=
-finline :: --param inline-call-cost=
-finline :: --param inline-unit-growth=
-finline :: --param large-function-growth=
-finline :: --param large-stack-frame-growth=
-finline :: --param large-function-insns=
-finline :: --param large-stack-frame=
-finline :: --param large-unit-insns=
-fguess-branch-probability :: --param hot-bb-frequency-fraction=
-fguess-branch-probability :: --param hot-bb-count-fraction=
#if GCC_VERSION >= 40600
-fprofile-use :: --param hot-bb-frequency-fraction=
-fprofile-use :: --param hot-bb-count-fraction=
#endif
// flag default values (useful for dep roots)

=> -O0
-O0 => -fearly-inlining
-O0 => -fno-inline, -fno-inline-small-functions
-O0 => -fno-partial-inlining, -fno-inline-functions
-O1 => -finline, -fno-inline-small-functions
-O1 => -fno-partial-inlining, -fno-inline-functions
-O2 => -finline, -finline-small-functions
-O2 => -fpartial-inlining, -fno-inline-functions
-Os => -finline, -finline-small-functions
-Os => -fpartial-inlining, -fno-inline-functions
-O3 => -finline, -finline-small-functions
-O3 => -fpartial-inlining, -finline-functions
#if GCC_VERSION >= 40600
-Ofast => -finline, -finline-small-functions
-Ofast => -fpartial-inlining, -finline-functions
#endif

WO2 80% 80% -finline-small-functions, -finline-functions, -fearly-inlining

WO3 80% 80% -finline-small-functions, -finline-functions, -fpartial-inlining

#endif // GCC_VERSION >= 40400
